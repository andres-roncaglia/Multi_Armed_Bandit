---
title: "La Guía del Apostador"
subtitle: "Trabajo Práctico Nº1"
format: pdf
lang: es
toc: true
toc-title: Indice
echo: FALSE
message: FALSE
warning: FALSE
geometry:
  - top= 25mm
  - left= 20mm
  - right = 20mm
  - bottom = 25mm
  - heightrounded
---

```{r Carga de librerias}
library(tidyverse)
library(RColorBrewer)
```

```{r Configuraciones predeterminadas}
knitr::opts_chunk$set(fig.align = "center", out.width = "70%")

set.seed("18122022")

theme_set(theme_bw())

```

\newpage

# Introducción

En los casinos uno de los juegos más llamativos son las máquinas tragamonedas o tragaperras. Son conocidas por ser exageradamente adictivas incluso en el mundo de las apuestas y en las cuales las personas pierden más dinero. Con el fin de que estas personas pierdan menos dinero se estudiará la eficacia de distintas estrategias de juego. A este problema se lo conoce como ["Bandido Multibrazo"](https://es.wikipedia.org/wiki/Bandido_multibrazo) (*Multi armed bandit*).

La principal incógnita se encuentra en descubrir hasta que punto conviene "explotar" por sobre "explorar" o viceversa. Donde explotar refiere a dar prioridad a elegir lo que se sabe que funciona, mientras que explorar refiere a ser propenso a salir de la "zona de confort" y buscar nuevas alternativas.

# Metodología

Se plantea que se tienen 3 máquinas tragamonedas con distintas probabilidades de ganar una unidad monetaria, las cuales son:

-   $\theta_A = 0.30$
-   $\theta_B = 0.55$
-   $\theta_C = 0.45$

Cada día se hará una sola tirada en una máquina que será elegida según la estrategia, durante los 366 días del año 2024, con el objetivo de ganar la mayor cantidad de dinero posible, teniendo en cuenta que no cuesta dinero jugar, es decir, solo podemos ganar dinero.

Se asume además que la creencia inicial de la probabilidad de ganar para cada máquina sigue una distribución $Beta(2,2)$, la cual se puede observar a continuación.

```{r prior}
thetas <- seq(0,1,length.out = 1000)

prior <- dbeta(thetas,2,2)
```


```{r prior fig}
#| fig-cap: "Distribución a priori de la probabilidad de éxito inicial para todas las máquinas."

tibble(thetas, prior) |>

  ggplot() +

  geom_line(aes(x = thetas, y = prior),

            color = "dodgerblue4",

            linewidth = 1) +

  labs(x = expression(theta), y = "Probabilidad") +

  geom_hline(yintercept = 0, color = "black", size = 0.2) +

  geom_vline(xintercept = 0, color = "black", size = 0.2)

```



\newpage
# Resultados

Para obtener una noción de cuanto se ganaría en promedio en un año de juego con la mejor máquina (máquina B), se simulan 1000 secuencias de 366 juegos.



```{r primer punto}
n <- 1000

ganancias <- NULL

for (i in 1:n) {

  ganancias[i] <- sum(rbinom(366, size = 1, prob = 0.55))

}

promedio_ganancias <- mean(ganancias)
```


```{r primer punto fig}
#| fig-cap: "Distribución de las unidades monetarias ganadas en un año con la máquina B."

tibble(ganancias) |>

  ggplot() +

  geom_histogram(aes(x = ganancias),

                 bins = 30,

                 fill = "dodgerblue3",

                 color = "black") +

  labs(x = "Unidades monetarias", y = "Frecuencias") +

  geom_hline(yintercept = 0, color = "black", size = 0.2)
```



Resultando `r round(promedio_ganancias, 2)` una estimación de la ganancia esperada durante un año de juego con la máquina B.



## Estrategias

Sin embargo las personas no tienen información acerca de las probabilidades de éxito de las máquinas, por lo que se diseñaron un conjunto de estrategias para descubrir con cúal se obtienen mejores resultados. 

Para esto se hacen simulaciones de los 366 días del año (o "n" años) mediante la siguiente función:
```{r cargamos las funciones}
source("Estrategias_y_simulacion.R")
```

::: {.callout-note}
## Función simulación

```{r funcion simulacion, echo=TRUE, eval=FALSE}
simulacion <- function(metodo, n = 1, param = 0.2) {
  
  if(!(metodo %in% names(estrategias))){
    stop("El método introducido no está especificado")}
  if(n<1 || (n != round(n))){
    stop("La cantidad de simulaciones debe ser un número natural")}
  if(metodo == "softmax" && param <= 0){
    stop("Para el método softmax el parámetro de temperatura debe ser mayor que 0")}
  if(metodo == "e_greedy" && (param < 0 || param > 1)){
    stop("Para el método e-greedy el parámetro epsilon debe estar entre 0 y 1")}
  
```
:::

::: {.callout-note}
##  ‎ ‎ ‎
```{r funcion simulacion 2, echo=TRUE, eval=FALSE}
  # Se crean los vectores donde se guardaran las ganancias y maquinas de los 366 
  # dias para cada repeticion. Se crea tambien una futura lista llamada sim que
  # va a guardar las ganancias y las maquinas usadas en las repeticiones
  
  ganancias <- NULL
  maquinas <- NULL
  sim <- NULL

  # Hacemos repeticiones de n años
  for (rep in 1:n) {
    
    # Se crean los vectores que guardaran las ganancias y las maquinas usadas en 
    # cada dia
    ganancia <- numeric(length = 366)
    maquina <- NULL
    for (dia in 1:366) {
      
      # Cada dia la maquina sera elegida segun el criterio de alguna de las 
      # estrategias diseñadas
      argumentos <- switch (metodo,
                            "al_azar" = list(),
                            "gcto" = list(maquina, ganancia),
                            "gcpp" = list(maquina, ganancia),
                            "e_greedy" = list(maquina, ganancia, param),
                            "softmax" = list(maquina, ganancia, param),
                            "thompson" = list(maquina, ganancia),
                            "upper_bound" = list(maquina, ganancia, param)
                            )
      
      maquina_dia <- do.call(estrategias[[metodo]], argumentos)
      
      # Una vez elegida la maquina se simula una bernoulli con la 
      # probabilidad de la maquina y se guarda el resultado
      ganancia[dia] <- rbinom(1, size = 1, prob = prob_reales[maquina_dia])
      
      # Se guarda ademas la maquina utilizada
      maquina[dia] <- maquina_dia
    }
```
:::

::: {.callout-note}
##  ‎ ‎ ‎
```{r funcion simulacion 3, echo=TRUE, eval=FALSE}
    # Se guardan en matrices las ganancias y las maquinas de los 366 dias
    # de las diferentes repeticiones
    ganancias <- cbind(ganancias, ganancia)
    maquinas <- cbind(maquinas, maquina)
    
  }  
  
  # Se transforman las matrices en tibbles, y se les asignan nombres a las 
  # columnas segun la repeticion (año)
  ganancias <- as_tibble(ganancias)
  maquinas <- as_tibble(maquinas)
  
  colnames(ganancias) <- paste0("Rep_",1:1000)
  colnames(maquinas) <- paste0("Rep_",1:1000)
  
  # Se añaden los tibbles a la lista
  sim[["Ganancias"]] <- ganancias
  sim[["Maquinas"]] <- maquinas
  
  # Devuelve la lista con los éxitos o fracasos para cada año en cada tirada
  # y la máquina utilizada
  sim 
}

```


:::

\newpage

### Completamente al azar

Consiste en elegir cada día una máquina cualquiera sin importar los resultados que se hayan obtenido en el día anterior. Esta estrategia se concentra únicamente en "explorar" pero nunca considera "explotar" como una posibilidad.

Para elegir la máquina con la que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función al_azar

```{r funcion al azar, echo=TRUE, eval=FALSE}

al_azar <- function() {
  # Elige una maquina al azar
  sample(names(prob_reales), 1)
}

```


:::

\


Simulando los 366 días de juego:

```{r sim al azar}
sim <- simulacion("al_azar", n = 1)

salida <- salidas(sim)


```

```{r al azar grafico_ganancias_acumuladas}
#| fig-cap: "Unidades monetarias acumuladas durante un año con la estrategia al azar."

salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r al azar grafico_barplot}
#| fig-cap: "Frecuencia, éxito y fracaso para cada máquina durante un año con la estrategia al azar."

salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`


```{r al azar grafico_posteriors}
#| fig-cap: "Probabilidades de éxito para cada máquina a posteriori luego de un año con la estrategia al azar."

salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

\newpage

Ventajas de la estrategia:

  - No se corre el riesgo de concentrarse demasiado en una máquina que produciría menos ganancias.
  
Desventajas de la estrategia:

  - No tiene en cuenta la información que se adquiere a través de los días.


\newpage
### Greedy con tasa observada

La máquina con la que se juega será la que tenga la mayor tasa de éxito hasta el día en que se juega. Esta estrategia se concentra demasiado en "explotar" y casi nada en "explorar".

Para elegir la máquina con la que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función gcto

```{r funcion gcto, echo=TRUE, eval=FALSE}

gcto <- function(maquina, ganancia) {
  
  # Las tasas son 0 en la primera iteracion
  tasa <- numeric(3)
  
  
  # Cuando una maquina no se usa ni una vez, la tasa va a seguir siendo 0
  # Cuando se juegue al menos una vez su tasa será el numero de veces que gano 
  # en la maquina dividido la cantidad de veces que jugo con la maquina
  if (sum(maquina == "A") > 0) {
    tasa[1] <- sum(ganancia[maquina == "A"])/sum(maquina == "A")
  }
  if (sum(maquina == "B") > 0) {
    tasa[2] <- sum(ganancia[maquina == "B"])/sum(maquina == "B")
  }
  if (sum(maquina == "C") > 0) {
    tasa[3] <- sum(ganancia[maquina == "C"])/sum(maquina == "C")
  }
  
  # Se asigna el nombre de la maquina para cada tasa
  names(tasa) <- c("A","B","C")
  
  # Verifica cual es la tasa mas alta y la elige, si hay una sola elige la 
  # maquina a la cual le pertenezca esa tasa, si hay varias maquinas con la misma 
  # tasa elige una al azar entre las que tengan la mayor tasa
  
  if (sum(tasa == max(tasa)) == 1) {
    maq <- names(tasa[which.max(tasa)])
  } else {
    maq <- sample(names(tasa[tasa == max(tasa)]), size = 1)
  }
  
  return(maq)
}



```
:::

\newpage
Simulando los 366 días de juego:

```{r sim gcto}
sim <- simulacion("gcto", n = 1)

salida <- salidas(sim)


```

```{r gcto grafico_ganancias_acumuladas}
#| fig-cap: "Unidades monetarias acumuladas durante un año con la estrategia greedy con tasa observada."

salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r gcto grafico_barplot}
#| fig-cap: "Frecuencia, éxito y fracaso para cada máquina durante un año con la estrategia greedy con tasa observada."

salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`

\newpage
```{r gcto grafico_posteriors}
#| fig-cap: "Probabilidades de éxito para cada máquina a posteriori luego de un año con la estrategia greedy con tasa observada."

salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

\

Ventajas de la estrategia:

  - En algunos escenarios es posible elegir siempre la mejor máquina.
  
Desventajas de la estrategia:

  - Una vez que se gane con una máquina, se elegirá siempre esa misma.
  
  - Es posible elegir explotar la peor máquina.


\newpage
### Greedy con probabilidad a posteriori

Partiendo de las creencias iniciales, luego de cada tirada y considerando las realizadas hasta el momento, se redefinen las probabilidades de éxito esperadas de cada máquina y se selecciona la mejor. 

Para elegir la máquina con la que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función gcpp

```{r funcion gcpp, echo=TRUE, eval=FALSE}

gcpp <- function(maquina, ganancia) {
  
  # Argumentos de las distribuciones a priori de los parámetros
  a1 <- 2; b1 <- 2; c1 <- 2; a2 <- 2; b2 <- 2; c2 <- 2
  
  # Si hay al menos una tirada con la máquina, modifica los parámetros de la
  # distribución a posteriori según corresponda
  if (sum(maquina == "A") > 0) {
    a1 <- 2 + sum(ganancia[maquina == "A"])
    a2 <- 2 + abs(sum(ganancia[maquina == "A"] -1))
  }
  if (sum(maquina == "B") > 0) {
    b1 <- 2 + sum(ganancia[maquina == "B"])
    b2 <- 2 + abs(sum(ganancia[maquina == "B"] -1))
  }
  if (sum(maquina == "C") > 0) {
    c1 <- 2 + sum(ganancia[maquina == "C"])
    c2 <- 2 + abs(sum(ganancia[maquina == "C"] -1))
  }
  
  # Se redefinen las probabilidades de éxito esperadas de cada máquina
  prob <- c(a1/(a1+a2), b1/(b1+b2), c1/(c1+c2))
  names(prob) <- c("A","B","C")
  
  # Selecciona la mejor, o una al azar entre las mejores si tienen el mismo valor
  if (sum(prob == max(prob)) == 1) {
    maq <- names(prob[which.max(prob)])
  } else {
    maq <- sample(names(prob[prob == max(prob)]), size = 1)
  }
  
  return(maq)
  
}
```
:::

\newpage
Simulando los 366 días de juego:

```{r sim gcpp}
sim <- simulacion("gcpp", n = 1)

salida <- salidas(sim)


```

```{r gcpp grafico_ganancias_acumuladas}
#| fig-cap: "Unidades monetarias acumuladas durante un año con la estrategia greedy con probabilidad a posteriori."

salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r gcpp grafico_barplot}
#| fig-cap: "Frecuencia, éxito y fracaso para cada máquina durante un año con la estrategia greedy con probabilidad a posteriori."

salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`

\newpage
```{r gcpp grafico_posteriors}
#| fig-cap: "Probabilidades de éxito para cada máquina a posteriori luego de un año con la estrategia greedy con probabilidad a posteriori."

salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

\

Ventajas de la estrategia:

  - Se tiene en cuenta toda la informacíon obtenida hasta el momento.
  
  - No se concentra demasiado pronto en explotar.

Desventajas de la estrategia:

  - Explora únicamente en los primeros días.
  
  - Aunque de manera menos frecuente que en el caso anterior, suele explotar la máquina incorrecta.


\newpage
### $\epsilon$-Greedy con tasa observada

Se selecciona con una probabilidad $1-\epsilon$ si usar la máquina que hasta el momento tiene la mayor tasa de éxito observada, o con una probabilidad de $\epsilon$, una al azar. $\epsilon$ es un parámetro de exploración, cuando es igual a $0$ la estrategia es igual a "Greedy con tasa observada", cuando es igual a $1$ es igual a la estrategia "Al azar".

Para elegir la máquina con la que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función e_greedy

```{r funcion e_greedy, echo=TRUE, eval=FALSE}
  
e_greedy <- function(maquina, ganancia, param) {
  # Las tasas son 0 en la primera iteracion
  tasa <- numeric(3)
  
  # Cuando una maquina no se usa ni una vez, la tasa va a seguir siendo 0
  if (sum(maquina == "A") > 0) {
    tasa[1] <- sum(ganancia[maquina == "A"])/sum(maquina == "A")
  }
  if (sum(maquina == "B") > 0) {
    tasa[2] <- sum(ganancia[maquina == "B"])/sum(maquina == "B")
  }
  if (sum(maquina == "C") > 0) {
    tasa[3] <- sum(ganancia[maquina == "C"])/sum(maquina == "C")
  }
  
  # Se asigna el nombre de la maquina para cada tasa
  names(tasa) <- c("A","B","C")
  # Se selecciona entre explorar o explotar
  aleatorio <- runif(1)
  
  # Si el valor aleatorio es menor o igual a epsilon elige una máquina al azar
  # en caso contrario elige a la que tenga mayor tasa observada
  probs <- c(0,0,0)
  if (aleatorio <= param) {
    return(sample(names(tasa),size = 1))
    } else {
      for (i in 1:3) {
        if((tasa == max(tasa))[i]){
          probs[i] <- 1/sum(tasa == max(tasa))}
        }
      return(sample(names(tasa),size = 1,prob = probs))
    }
  }
```
:::

\newpage

Dado que $\epsilon$ puede tomar cualquier valor en el intervalo $[0;1]$, mediante simulaciones buscaremos el valor de este que maximice la cantidad de unidades monetarias ganadas en un año.

::: {.callout-note}
## Maximización de $\epsilon$

```{r e_greedy maximizacion de epsilon, eval=FALSE, echo=TRUE}
# Se seleccionan unos cuantos epsilons a probar
eps <- seq(0.075,0.25,.025)


final <- NULL

# Para cada epsilon se hacen mil simulaciones de un año de 366 días
for (i in 1:length(eps)) {
  temp <- simulacion("e_greedy",n = 1000,param = eps[i])
  final <- cbind(final, apply(temp$Ganancias,2,sum))
}

# Cada columna tiene las ganancias totales en 1000 años con un epsilon
# Se nombran las columnas según el epsilon con el que se hicieron las simulaciones
colnames(final) <- eps

# Se obserban las medias y los desvios
apply(final, 2, mean)
apply(final, 2, sd)

# Se calcula la probabilidad de que las ganancias obtenidas en un año con un epsilon
# sean mayores que con otro y nos quedamos con aquel con el que sea más probable
# obtener mayores ganancias
for (i in 1:length(eps)) {
  for (j in 1:length(eps)) {
    print(mean(final[,i]>=final[,j]))
  }
}


```
:::


Siendo X una variable aleatoria que representa la cantidad de unidades monetarias ganadas en total en un año de juego y estimando las $P(X_\epsilon>X_{\epsilon'})$ para los $\epsilon$ planteados, concluímos que el valor de  \newline $\epsilon/P(X_\epsilon>X_{\epsilon'})>P(X_\epsilon<X_{\epsilon'}) \ \ \ \ \forall{\epsilon'\neq\epsilon}$ es $\epsilon = 0,125$. Lo que significa que con un $\epsilon$ de $0.125$ es más probable obtener una mayor cantidad de unidades monetarias totales que con otros valores.

\newpage
Simulando los 366 días de juego con un $\epsilon$ de $0.125$:

```{r sim e_greedy}
sim <- simulacion("e_greedy", n = 1, param = 0.125)

salida <- salidas(sim)

```

```{r e_greedy grafico_ganancias_acumuladas}
#| fig-cap: "Unidades monetarias acumuladas durante un año con la estrategia e-greedy."

salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r e_greedy grafico_barplot}
#| fig-cap: "Frecuencia, éxito y fracaso para cada máquina durante un año con la estrategia e-greedy."

salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`


```{r e_greedy grafico_posteriors}
#| fig-cap: "Probabilidades de éxito para cada máquina a posteriori luego de un año con la estrategia e-greedy."

salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

Ventajas de la estrategia:

  - La asignación del parámetro $\epsilon$ permite regular hasta que punto se prefiere explorar por sobre explotar o viceversa.
  
  - Con buenos valores de $\epsilon$ se obtiene un buen balance entre explotación y exploración, llevando en muchos casos a buenas ganancias.
  
  - La estrategia nunca comete el error de explotar una sola máquina, ya que siempre existe una probabilidad $\epsilon > 0$ de elegir una máquina al azar.

Desventajas de la estrategia:

  - Valores demasiado altos de $\epsilon$ producen un exceso de exploración y no se aprovecha la información obtenida.
  
  - Valores demasiado pequeños de $\epsilon$ pueden producir que se sobreexplote una mala máquina.


\newpage
### Softmax

Dada la tasa observada para cada máquina ($\pi_{i}$) y el parámetro de temperatura ($\tau$) definido, se calcula una probabilidad de elegir cada una de estas utilizando la función softmax: 

$$Pr(i) = \frac{e^{\pi_i/\tau}}{\sum_{i = 1}^{3}{e^{\pi_i/\tau}}}$$ 

Donde $i$ representa a las máquinas y $\tau$ a diferencia del método $\epsilon$-greedy, en el cual el parámetro determina la probabilidad de explorar o explotar, en este caso determina, de manera inversa, el peso que tendrán las tasas de éxitos observadas hasta el momento de cada máquina al calcular las probabilidades de elegir cada una de estas.

Para elegir la máquina con la que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función softmax

```{r funcion softmax, echo=TRUE, eval=FALSE}
softmax <- function(maquina, ganancia, param) {
  
  # Las tasas son 0 en la primera iteracion
  tasa <- numeric(3)
  
  # Cuando una maquina no se usa ni una vez, la tasa va a seguir siendo 0
  # Cuando se juegue al menos una vez su tasa será el numero de veces que gano 
  # en la maquina dividido la cantidad de veces que jugo con la maquina
  if (sum(maquina == "A") > 0) {
    tasa[1] <- sum(ganancia[maquina == "A"])/sum(maquina == "A")
  }
  if (sum(maquina == "B") > 0) {
    tasa[2] <- sum(ganancia[maquina == "B"])/sum(maquina == "B")
  }
  if (sum(maquina == "C") > 0) {
    tasa[3] <- sum(ganancia[maquina == "C"])/sum(maquina == "C")
  }
  
  # Se asigna el nombre de la maquina para cada tasa
  names(tasa) <- c("A","B","C")
  
  # Calculo las probabilidades en base a las tasas
  probs <- exp(tasa/param)/sum(exp(tasa/param))
  
  return(sample(names(tasa),size = 1,prob = probs))
}

```
:::

\newpage

Sin embargo, el valor elegido para $\tau > 0$ puede influenciar la cantidad de unidades monetarias ganadas en un año, es por eso que es de importancia descubrir, a través de simulaciones, para que valor de $\tau$ se maximizan.

::: {.callout-note}
## Maximización de $\tau$

```{r softmax maximisando thau, eval=FALSE, echo=TRUE}
tau <- c(0.8,seq(1,10,1))

final <- NULL

for (i in 1:length(tau)) {
  temp <- simulacion("softmax",n = 1000,param = tau[i])
  final <- cbind(final, apply(temp$Ganancias,2,sum))
}

colnames(final) <- tau

apply(final, 2, mean)
apply(final, 2, sd)

# Por como aumenta la media nos vamos a concentrar en el intervalo (0,1]

tau <- c(seq(0,1,0.05))[-1]

final <- NULL

for (i in 1:length(tau)) {
  temp <- simulacion("softmax",n = 1000,param = tau[i])
  final <- cbind(final, apply(temp$Ganancias,2,sum))
}

colnames(final) <- tau

apply(final, 2, mean)
apply(final, 2, sd)


for (i in 1:length(eps)) {
  for (j in 1:length(eps)) {
    print(mean(final[,i]>=final[,j]))
  }
}

# Tau óptimo 0.1
```
:::

Se puede concluir que se una tiene mayor probabildad de obtener más unidades monetarias en un año de juego con un $\tau$ de 0,1.

\newpage

Simulando los 366 días de juego:

```{r sim softmax}
sim <- simulacion("softmax", n = 1, param = 0.1)

salida <- salidas(sim)


```

```{r softmax grafico_ganancias_acumuladas}
#| fig-cap: "Unidades monetarias acumuladas durante un año con la estrategia softmax."

salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r softmax grafico_barplot}
#| fig-cap: "Frecuencia, éxito y fracaso para cada máquina durante un año con la estrategia softmax."

salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`


```{r softmax grafico_posteriors}
#| fig-cap: "Probabilidades de éxito para cada máquina a posteriori luego de un año con la estrategia softmax."

salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

Ventajas de la estrategia:

  - Al igual que la estrategia "$\epsilon$-greedy", se le puede asignar valores al parámetro $\tau$ para lograr un equilibrio entre exploración y explotación, y así lograr mayores ganancias.
  
  - Hace uso de la información de las tiradas anteriores.
  
Desventajas de la estrategia:

  - Para valores de $\tau$ muy cercanos a cero, se corre el riesgo de sobreexplotar una máquina 

  - Cuando $\tau \rightarrow \infty$, la estrategia tiende a elegir máquinas al azar.

\newpage
### Upper-Bound

Se selecciona la máquina que tenga el mayor límite superior, en un intervalo de credibilidad centrado, del 95% de probabilidad.

Para elegir la máquina con la que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función UB

```{r funcion upper-bound, echo=TRUE, eval=FALSE}
UB <- function(maquina, ganancia, param) {
  # Argumentos de las distribuciones de los parámetros
  a1 <- 2; b1 <- 2; c1 <- 2; a2 <- 2; b2 <- 2; c2 <- 2
  
  if (sum(maquina == "A") > 0) {
    a1 <- 2 + sum(ganancia[maquina == "A"])
    a2 <- 2 + abs(sum(ganancia[maquina == "A"] -1))
  }
  if (sum(maquina == "B") > 0) {
    b1 <- 2 + sum(ganancia[maquina == "B"])
    b2 <- 2 + abs(sum(ganancia[maquina == "B"] -1))
  }
  if (sum(maquina == "C") > 0) {
    c1 <- 2 + sum(ganancia[maquina == "C"])
    c2 <- 2 + abs(sum(ganancia[maquina == "C"] -1))
  }
  
  # Limite superior de 95% credibilidad
  ls <- c(qbeta(1 - param/2, a1, a2), qbeta(1 - param/2, b1, b2),
          qbeta(1 - param/2, c1, c2))
  names(ls) <- c("A","B","C")
  
  # Para elegir el limite superior mayor
  if (sum(ls == max(ls)) == 1) {
    maq <- names(which.max(ls))
    
  } else if (sum(ls == max(ls)) == 2) {
    maq <- sample(names(ls)[ls == max(ls)], size = 1)
    
  } else {
    maq <- sample(names(ls), size = 1)
  }
  
  return(maq)
}

```
:::

\newpage 

Simulando los 366 días de juego:

```{r sim upper-bound}
sim <- simulacion("upper_bound", n = 1, param = 0.05)

salida <- salidas(sim)
```

```{r upper-bound grafico_ganancias_acumuladas}
#| fig-cap: "Unidades monetarias acumuladas durante un año con la estrategia upper-bound."

salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r upper-bound grafico_barplot}
#| fig-cap: "Frecuencia, éxito y fracaso para cada máquina durante un año con la estrategia upper-bound."

salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`


```{r upper-bound grafico_posteriors}
#| fig-cap: "Probabilidades de éxito para cada máquina a posteriori luego de un año con la estrategia upper-bound."

salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

Ventajas de la estrategia:

  - Utiliza la información de las tiradas anteriores.
  

\newpage
### Thompson

Se extrae una muestra de la distribución a posteriori de las probabilidades de éxito de cada máquina y se juega con la que se obtenga la muestra más grande.

Para elegir la máquina con la que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función thompson

```{r funcion thompson, echo=TRUE, eval=FALSE}

thompson <- function(maquina, ganancia) {
  
  # Argumentos de las distribuciones de los parámetros
  a1 <- 2; b1 <- 2; c1 <- 2; a2 <- 2; b2 <- 2; c2 <- 2
  
  if (sum(maquina == "A") > 0) {
    a1 <- 2 + sum(ganancia[maquina == "A"])
    a2 <- 2 + abs(sum(ganancia[maquina == "A"] -1))
  }
  if (sum(maquina == "B") > 0) {
    b1 <- 2 + sum(ganancia[maquina == "B"])
    b2 <- 2 + abs(sum(ganancia[maquina == "B"] -1))
  }
  if (sum(maquina == "C") > 0) {
    c1 <- 2 + sum(ganancia[maquina == "C"])
    c2 <- 2 + abs(sum(ganancia[maquina == "C"] -1))
  }
  
  
  # Tomo una muestra de cada theta
  muestras <- c(rbeta(1, a1, a2), rbeta(1, b1, b2), rbeta(1, c1, c2))
  # parametros mayores.
  
  names(muestras) <- c("A","B","C")
  # Devuelvo la más grande
  
  return(names(muestras[which.max(muestras)]))
  
}
```
:::

\newpage
Simulando los 366 días de juego:

```{r sim thompson}
sim <- simulacion("thompson", n = 1)

salida <- salidas(sim)


```

```{r thompson grafico_ganancias_acumuladas}
#| fig-cap: "Unidades monetarias acumuladas durante un año con la estrategia Thompson."

salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r thompson grafico_barplot}
#| fig-cap: "Frecuencia, éxito y fracaso para cada máquina durante un año con la estrategia Thompson."

salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`


```{r thompson grafico_posteriors}
#| fig-cap: "Probabilidades de éxito para cada máquina a posteriori luego de un año con la estrategia Thompson."

salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

Ventajas de la estrategia:

  - Utiliza la información de las tiradas anteriores.
  
  - A medida que pasan los días, la estrategia eligirá con mayor frecuencia a la mejor máquina.

Desventajas de la estrategia:

  - Si las distribuciones a priori de las probabilidades de éxito de cada máquina no se definen adecuadamente, la estrategia puede llevar a conclusiones erróneas en períodos de tiempo que no sean suficientemente largos.

\newpage
## Comparaciones

Luego de presentar todas las estrategias es lógico hacerse la pregunta ¿pero cúal método es el mejor? Para responder a esto se comparan las ganancias anuales de 1000 simulaciones en un año de juego.

```{r Comparaciones finales, eval=FALSE}
estrategias_final <- NULL
names(estrategias)

for (i in 1:length(estrategias)) {
  param <- NULL
  if(names(estrategias)[i] == "e_greedy"){param <- 0.125}
  if(names(estrategias)[i] == "softmax"){param <- 0.1}
  if(names(estrategias)[i] == "upper_bound"){param <- 0.05}
  temp <- simulacion(names(estrategias)[i],n = 1000,param = param)
  estrategias_final <- cbind(estrategias_final, apply(temp$Ganancias,2,sum))
  print(paste(i,"de",length(estrategias)))
}

colnames(estrategias_final) <- names(estrategias)

apply(estrategias_final,2,mean)
apply(estrategias_final,2,sd)

for (i in 1:length(estrategias)) {
  print(mean(estrategias_final[,3]>estrategias_final[,i])  )
}


mean(estrategias_final[,3]>estrategias_final[,6])
# al_azar        gcto        gcpp    e_greedy     softmax upper_bound    thompson 
#     158.315     168.331     192.170     186.630     184.120     190.452     188.083
```
```{r carga de simulacion final}
load("simulacion_final.RData")
```


```{r Boxplots comparaciones}
#| fig-cap: "Boxplots comparativos de las unidades monetarias ganadas (en un año) según estrategia."


data.frame(Estrategia = factor(rep(colnames(estrategias_final), each = 1000), levels = colnames(estrategias_final)),
           Ganancias = as.vector(estrategias_final)) |> 
  ggplot() +
  aes(x = Estrategia, y = Ganancias) +
  geom_boxplot(aes(fill = Estrategia)) +
  stat_summary(fun = mean, geom = "point", shape = 17, size = 2) +
  scale_fill_brewer(palette = "Paired") +
  labs(y = "Unidades monetarias ganadas en un año", caption = "El triángulo representa la media de las ganancias.") +
  theme(legend.position = "none", plot.caption = element_text(hjust=0)) 

```

Se puede ver que las estrategias con las que se obtienen mejores resultados son **Greedy con probabilidad a posteriori** y **Upper-Bound**, siendo más probable obtener mayores ganancias con la primera. Mientras que las que peor desempeño tuvieron fueron las estrategias **al azar** y **Greedy con tasa observada**.

Se puede destacar que las estrategias que usan métodos bayesianos para la elección de máquinas son:

  - Greedy con probabilidad a posteriori
  - Upper-Bound
  - Thompson

Porque son los que se basan en las distribuciones a posteriori para elegir la máquina a utilizar.

# Conclusión

Si bien el presente estudio no busca generar la falsa ilusión de que es posible generar grandes ganancias con máquinas tragamonedas (tragaperras) es interesante desde el punto de vista de la estadistica bayesiana estudiar distintas tecnicas y ver cual es la que resuelve de mejor manera la problematica del ["bandido multibrazo"](https://es.wikipedia.org/wiki/Bandido_multibrazo). Se llegó a la conclusión de que la estrategia a seguir para maximizar la probabilidad de obtener mayores ganancias, es **Greedy con probabilidad a posteriori**.


# Anexo

Se pueden replicar los resultados y comprobar los códigos utilizados consultando el [repositorio](https://github.com/andres-roncaglia/tp1-bayes) del trabajo.