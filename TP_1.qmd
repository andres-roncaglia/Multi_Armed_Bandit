---
title: "La Guía del Apostador"
subtitle: "Trabajo Práctico Nº1"
format: pdf
toc: true
toc-title: Indice
echo: FALSE
message: FALSE
warning: FALSE
geometry:
  - top= 25mm
  - left= 20mm
  - right = 20mm
  - bottom = 25mm
  - heightrounded
---

```{r Carga de librerias}
library(tidyverse)
library(RColorBrewer)
```

```{r Configuraciones predeterminadas}
knitr::opts_chunk$set(fig.align = "center", fig.width = "60%", out.width = "70%")

set.seed("18122022")

theme_set(theme_bw())

```

\newpage

# Introducción

En los casinos uno de los juegos más llamativos son las máquinas tragamonedas o tragaperras. También conocido por ser uno de los juegos más adictivos en el mundo de las apuestas y en el cual las personas pierden más dinero. Con el fin de que estas personas pierdan menos dinero se estudiará la eficacia de distintas estrategias de juego. A este problema se lo conoce como "Bandido Multibrazo" (*Multi armed bandit*).

La principal incógnita se encuentra en descubrir hasta que punto conviene "explotar" por sobre "explorar" o viceversa. Explotar refiere a dar prioridad a elegir lo que sabemos que funciona, mientras que explorar refiere a ser propenso a salir de la "zona de confort" y buscar nuevas alternativas.

# Metodología

Se plantea que se tienen 3 máquinas tragamonedas con distintas probabilidades de ganar una unidad monetaria, las cuales son:

-   $\theta_A = 0.30$
-   $\theta_B = 0.55$
-   $\theta_C = 0.45$

Cada día se hará una sola tirada en una máquina que será elegida según la estrategia, durante los 366 días del año 2024, con el objetivo de ganar la mayor cantidad de dinero posible, teniendo en cuenta que no cuesta dinero jugar, es decir, solo podemos ganar dinero.

Se asume además que la creencia inicial de la probabilidad de ganar para cada máquina sigue una distribución $Beta(2,2)$, la cual se puede observar a continuación.

```{r prior}
thetas <- seq(0,1,length.out = 1000)

prior <- dbeta(thetas,2,2)

tibble(thetas, prior) |>

  ggplot() +

  geom_line(aes(x = thetas, y = prior),

            color = "dodgerblue4",

            linewidth = 1) +

  labs(x = expression(theta), y = "Probabilidad") +

  geom_hline(yintercept = 0, color = "black", size = 0.2) +

  geom_vline(xintercept = 0, color = "black", size = 0.2)

```

# Resultados

Para obtener una noción de cuanto se ganaría en promedio en un año de juego con la mejor máquina (máquina B), se simulan 1000 secuencias de 366 juegos.



```{r primer punto}
n <- 1000

ganancias <- NULL

for (i in 1:n) {

  ganancias[i] <- sum(rbinom(366, size = 1, prob = 0.55))

}

promedio_ganancias <- mean(ganancias)

tibble(ganancias) |>

  ggplot() +

  geom_histogram(aes(x = ganancias),

                 bins = 30,

                 fill = "dodgerblue3",

                 color = "black") +

  labs(x = "Ganancias", y = "Frecuencias") +

  geom_hline(yintercept = 0, color = "black", size = 0.2)
```



Resultando `r round(promedio_ganancias, 2)` una estimación de la ganancia esperada durante un año de juego con la máquina B.





\newpage

## Estrategias

Sin embargo las personas no tienen información acerca de las probabilidades de éxito de las máquinas, por lo que se diseñaron un conjunto de estrategias para descubrir con cúal se obtienen mejores resultados. 


```{r cargamos las funciones}
source("Estrategias_y_simulacion.R")
```

::: {.callout-note}
## Función simulación

```{r funcion simulacion, echo=TRUE, eval=FALSE}

# n simulaciones de los 366 dias, jugando 1 vez por día
simulacion <- function(metodo, n = 1, param = 0.2) {
  
  if(!(metodo %in% names(estrategias))){
    stop("El método introducido no está especificado")
  }
  if(n<1 || (n != round(n))){
    stop("La cantidad de simulaciones debe ser un número natural")
  }
  if(metodo == "softmax" && param <= 0){
    stop("Para el método softmax el parámetro de temperatura debe ser mayor que 0")
  }
  if(metodo == "e_greedy" && (param < 0 || param > 1)){
    stop("Para el método e-greedy el parámetro epsilon debe estar entre 0 y 1")
  }
  
  # Creamos los vectores donde guardaremos las ganancias y maquinas de los 366 dias para cada repeticion
  # Creamos tambien una futura lista llamada sim que va a guardar las ganancias y las maquinas usadas en las repeticiones
  ganancias <- NULL
  maquinas <- NULL
  sim <- NULL
  
  # Hacemos n repeticiones
  for (rep in 1:n) {
    
    #Creamos los vectores que guardaran las ganancias y las maquinas usadas en cada dia
    ganancia <- numeric(length = 366)
    maquina <- NULL
    for (dia in 1:366) {
      
      # Para cada dia la maquina sera elegida con alguno de las estrategias diseñadas
      # maquina_dia <- estrategias[[metodo]](maquina, ganancia, param)
      
      # Intento de limpiar el codigo
      argumentos <- switch (metodo,
                            "al_azar" = list(),
                            "gcto" = list(maquina, ganancia),
                            "gcpp" = list(maquina, ganancia),
                            "e_greedy" = list(maquina, ganancia, param),
                            "softmax" = list(maquina, ganancia, param),
                            "thompson" = list(maquina, ganancia),
                            "upper_bound" = list(maquina, ganancia, param)
                            )
      
      maquina_dia <- do.call(estrategias[[metodo]], argumentos)
      
      
      # una vez elegida la maquina simulamos con una bernoulli con la probabilidad de la maquina
      # y guardamos el resultado
      ganancia[dia] <- rbinom(1, size = 1, prob = prob_reales[maquina_dia])
      
      # Guardamos ademas la maquina utilizada
      maquina[dia] <- maquina_dia
    }
    
    # Guardamos en matrices las ganancias y las maquinas de los 366 dias de las diferentes repeticiones
    ganancias <- cbind(ganancias, ganancia)
    maquinas <- cbind(maquinas, maquina)
    
  }  
  
  #Transformamos las matrices en tibbles, y les asignamos nombres a las columnas segun el repeticion
  ganancias <- as_tibble(ganancias)
  maquinas <- as_tibble(maquinas)
  
  colnames(ganancias) <- paste0("Rep_",1:1000)
  colnames(maquinas) <- paste0("Rep_",1:1000)
  
  
  # Añadimos los tibbles a la lista
  sim[["Ganancias"]] <- ganancias
  sim[["Maquinas"]] <- maquinas
  
  # Devolvemos la lista
  sim 
  
}

```


:::

\newpage
### Completamente al azar

Consiste en elegir cada día una máquina cualquiera sin importar los resultados que se hayan obtenido en el día anterior. Esta estrategia se concentra únicamente en "explorar" pero nunca considera "explotar" como una posibilidad.

Para elegir la máquina que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función al_azar

```{r funcion al azar, echo=TRUE, eval=FALSE}

# Estrategia al azar
al_azar <- function() {
  # Elige una maquina al azar
  sample(names(prob_reales), 1)
}

```


:::

Simulando los 366 días de juego:

```{r sim al azar}
sim <- simulacion("al_azar", n = 1)

salida <- salidas(sim)


```

```{r al azar grafico_ganancias_acumuladas}
salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r al azar grafico_barplot}
salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`


```{r al azar grafico_posteriors}
salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

Ventajas de la estrategia:

  - No se corre el riesgo de concentrarse demasiado en una máquina que produciría menos ganancias.
  
Desventajas de la estrategia:

  - No tiene en cuenta la información que se adquiere a través de los días.

\newpage
### Greedy con tasa observada

La máquina con la que se juega será la que tenga la mayor tasa de éxito hasta el dia en que se juega. Esta estrategia se concentra demasiado en "explotar" y casi nada en "explorar".

Para elegir la máquina que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función gcto

```{r funcion gcto, echo=TRUE, eval=FALSE}


# Greedy con tasa observada
gcto <- function(maquina, ganancia) {
  
  # Las tazas son 0 en la primera iteracion
  tasa <- numeric(3)
  
  
  # Cuando una maquina no se usa ni una vez, la tasa va a seguir siendo 0
  # Cuando se juegue al menos una vez su tasa será el numero de veces que gano 
  # en la maquina dividido la cantidad de veces que jugo con la maquina
  if (sum(maquina == "A") > 0) {
    tasa[1] <- sum(ganancia[maquina == "A"])/sum(maquina == "A")
  }
  if (sum(maquina == "B") > 0) {
    tasa[2] <- sum(ganancia[maquina == "B"])/sum(maquina == "B")
  }
  if (sum(maquina == "C") > 0) {
    tasa[3] <- sum(ganancia[maquina == "C"])/sum(maquina == "C")
  }
  
  # Se asigna el nombre de la maquina para cada tasa
  names(tasa) <- c("A","B","C")
  
  # Verifica cual es la tasa mas alta y la elige, si hay una sola elige la 
  # maquina a la cual le pertenezca esa tasa, si hay varias maquinas con la misma 
  # tasa elige una al azar entre las que tengan la mayor tasa
  
  if (sum(tasa == max(tasa)) == 1) {
    maq <- names(tasa[which.max(tasa)])
  } else {
    maq <- sample(names(tasa[tasa == max(tasa)]), size = 1)
  }
  
  return(maq)
}



```
:::


Simulando los 366 días de juego:

```{r sim gcto}
sim <- simulacion("gcto", n = 1)

salida <- salidas(sim)


```

```{r gcto grafico_ganancias_acumuladas}
salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r gcto grafico_barplot}
salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`


```{r gcto grafico_posteriors}
salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

Ventajas de la estrategia:

  - En algunos escenarios es posible elegir siempre la mejor máquina.
  
Desventajas de la estrategia:

  - Una vez que se gane con una máquina, se elegirá siempre esa misma.
  
  - Es posible elegir explotar la peor máquina.


\newpage
### Greedy con probabilidad a posteriori

La máquina con la que se juega será la que tenga la mayor tasa de éxito hasta el dia en que se juega. Esta estrategia se concentra demasiado en "explotar" y casi nada en "explorar".

Para elegir la máquina que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función gcpp

```{r funcion gcpp, echo=TRUE, eval=FALSE}

# Greedy con probabilidad a posteriori

gcpp <- function(maquina, ganancia) {
  
  # Argumentos de las distribuciones de los parámetros
  a1 <- 2; b1 <- 2; c1 <- 2; a2 <- 2; b2 <- 2; c2 <- 2
  
  if (sum(maquina == "A") > 0) {
    a1 <- 2 + sum(ganancia[maquina == "A"])
    a2 <- 2 + abs(sum(ganancia[maquina == "A"] -1))
  }
  if (sum(maquina == "B") > 0) {
    b1 <- 2 + sum(ganancia[maquina == "B"])
    b2 <- 2 + abs(sum(ganancia[maquina == "B"] -1))
  }
  if (sum(maquina == "C") > 0) {
    c1 <- 2 + sum(ganancia[maquina == "C"])
    c2 <- 2 + abs(sum(ganancia[maquina == "C"] -1))
  }
  
  prob <- c(a1/(a1+a2), b1/(b1+b2), c1/(c1+c2))
  names(prob) <- c("A","B","C")
  
  if (sum(prob == max(prob)) == 1) {
    maq <- names(prob[which.max(prob)])
  } else {
    maq <- sample(names(prob[prob == max(prob)]), size = 1)
  }
  
  return(maq)
  
}



```
:::


Simulando los 366 días de juego:

```{r sim gcpp}
sim <- simulacion("gcpp", n = 1)

salida <- salidas(sim)


```

```{r gcpp grafico_ganancias_acumuladas}
salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r gcpp grafico_barplot}
salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`


```{r gcpp grafico_posteriors}
salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

Ventajas de la estrategia:

  -

Desventajas de la estrategia:

  -


\newpage
### e-Greedy con tasa observada

La máquina con la que se juega será la que tenga la mayor tasa de éxito hasta el dia en que se juega. Esta estrategia se concentra demasiado en "explotar" y casi nada en "explorar".

Para elegir la máquina que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función e_greedy

```{r funcion e_greedy, echo=TRUE, eval=FALSE}
# e-Greedy con tasa observada

e_greedy <- function(maquina, ganancia, param) {
  
  # Las tazas son 0 en la primera iteracion
  tasa <- numeric(3)
  
  
  # Cuando una maquina no se usa ni una vez, la tasa va a seguir siendo 0
  # Cuando se juegue al menos una vez su tasa será el numero de veces que gano en la maquina
  # dividido la cantidad de veces que jugo con la maquina
  if (sum(maquina == "A") > 0) {
    tasa[1] <- sum(ganancia[maquina == "A"])/sum(maquina == "A")
  }
  if (sum(maquina == "B") > 0) {
    tasa[2] <- sum(ganancia[maquina == "B"])/sum(maquina == "B")
  }
  if (sum(maquina == "C") > 0) {
    tasa[3] <- sum(ganancia[maquina == "C"])/sum(maquina == "C")
  }
  
  # Se asigna el nombre de la maquina para cada tasa
  names(tasa) <- c("A","B","C")
  # Verifica cual es la tasa mas alta y la elige, si hay una sola elige la maquina a la cual le
  # pertenezca esa tasa, si hay varias maquinas con la misma tasa elige una al azar entre las 
  # que tengan la mayor tasa
  if (sum(tasa == max(tasa)) == 1) {
    prob <- rep(param/2,3)
    prob[which.max(tasa)] <- 1-param
    maq <- sample(names(tasa),size = 1,prob = prob)
    
  } else if (sum(tasa == max(tasa)) == 2) {
    prob <- rep((1-param)/2,3)
    prob[which.min(tasa)] <- param
    maq <- sample(names(tasa),size = 1,prob = prob)
    
  } else {
    maq <- sample(names(tasa),size = 1)
    
  }
  
  return(maq)
}



```
:::


Simulando los 366 días de juego:

```{r sim e_greedy}
sim <- simulacion("e_greedy", n = 1)

salida <- salidas(sim)


```

```{r e_greedy grafico_ganancias_acumuladas}
salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r e_greedy grafico_barplot}
salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`


```{r e_greedy grafico_posteriors}
salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

Ventajas de la estrategia:

  -

Desventajas de la estrategia:

  -


\newpage
### Softmax

La máquina con la que se juega será la que tenga la mayor tasa de éxito hasta el dia en que se juega. Esta estrategia se concentra demasiado en "explotar" y casi nada en "explorar".

Para elegir la máquina que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función softmax

```{r funcion softmax, echo=TRUE, eval=FALSE}

# Softmax -------------

softmax <- function(maquina, ganancia, param) {
  
  # Las tasas son 0 en la primera iteracion
  tasa <- numeric(3)
  
  # Cuando una maquina no se usa ni una vez, la tasa va a seguir siendo 0
  # Cuando se juegue al menos una vez su tasa será el numero de veces que gano en la maquina
  # dividido la cantidad de veces que jugo con la maquina
  if (sum(maquina == "A") > 0) {
    tasa[1] <- sum(ganancia[maquina == "A"])/sum(maquina == "A")
  }
  if (sum(maquina == "B") > 0) {
    tasa[2] <- sum(ganancia[maquina == "B"])/sum(maquina == "B")
  }
  if (sum(maquina == "C") > 0) {
    tasa[3] <- sum(ganancia[maquina == "C"])/sum(maquina == "C")
  }
  
  # Se asigna el nombre de la maquina para cada tasa
  names(tasa) <- c("A","B","C")
  
  # Calculo las probabilidades en base a las tasas
  # Como tasa es un vector puedo operar como muestro abajo
  probs <- exp(tasa/param)/sum(exp(tasa/param))
  
  # Directamente pongo el Sample en el return para eficiencia
  
  return(sample(names(tasa),size = 1,prob = probs))
}

```
:::


Simulando los 366 días de juego:

```{r sim softmax}
sim <- simulacion("softmax", n = 1)

salida <- salidas(sim)


```

```{r softmax grafico_ganancias_acumuladas}
salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r softmax grafico_barplot}
salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`


```{r softmax grafico_posteriors}
salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

Ventajas de la estrategia:

  -

Desventajas de la estrategia:

  -



\newpage
### Upper-Bound

La máquina con la que se juega será la que tenga la mayor tasa de éxito hasta el dia en que se juega. Esta estrategia se concentra demasiado en "explotar" y casi nada en "explorar".

Para elegir la máquina que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función UB

```{r funcion upper-bound, echo=TRUE, eval=FALSE}

# Upper-Bound -------------

UB <- function(maquina, ganancia, param) {
  
  # Argumentos de las distribuciones de los parámetros
  a1 <- 2; b1 <- 2; c1 <- 2; a2 <- 2; b2 <- 2; c2 <- 2
  
  if (sum(maquina == "A") > 0) {
    a1 <- 2 + sum(ganancia[maquina == "A"])
    a2 <- 2 + abs(sum(ganancia[maquina == "A"] -1))
  }
  if (sum(maquina == "B") > 0) {
    b1 <- 2 + sum(ganancia[maquina == "B"])
    b2 <- 2 + abs(sum(ganancia[maquina == "B"] -1))
  }
  if (sum(maquina == "C") > 0) {
    c1 <- 2 + sum(ganancia[maquina == "C"])
    c2 <- 2 + abs(sum(ganancia[maquina == "C"] -1))
  }
  
  # Limite superior de 95% credibilidad (Preguntar el miercoles 10/04)
  ls <- c(qbeta(1 - param/2, a1, a2), qbeta(1 - param/2, b1, b2), qbeta(1 - param/2, c1, c2))
  names(ls) <- c("A","B","C")
  
  # Para elegir el limite superior mayor
  if (sum(ls == max(ls)) == 1) {
    maq <- names(which.max(ls))
    
  } else if (sum(ls == max(ls)) == 2) {
    maq <- sample(names(ls)[ls == max(ls)], size = 1)
    
  } else {
    maq <- sample(names(ls), size = 1)
    
  }
  
  return(maq)
}

```
:::


Simulando los 366 días de juego:

```{r sim upper-bound}
sim <- simulacion("upper_bound", n = 1)

salida <- salidas(sim)


```

```{r upper-bound grafico_ganancias_acumuladas}
salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r upper-bound grafico_barplot}
salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`


```{r upper-bound grafico_posteriors}
salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

Ventajas de la estrategia:

  -

Desventajas de la estrategia:

  -
  


\newpage
### Thompson

La máquina con la que se juega será la que tenga la mayor tasa de éxito hasta el dia en que se juega. Esta estrategia se concentra demasiado en "explotar" y casi nada en "explorar".

Para elegir la máquina que se va a jugar en el día se hizo uso de la siguiente función:

::: {.callout-note}
## Función thompson

```{r funcion thompson, echo=TRUE, eval=FALSE}

# Thompson -------------

thompson <- function(maquina, ganancia) {
  
  # Argumentos de las distribuciones de los parámetros
  a1 <- 2; b1 <- 2; c1 <- 2; a2 <- 2; b2 <- 2; c2 <- 2
  
  if (sum(maquina == "A") > 0) {
    a1 <- 2 + sum(ganancia[maquina == "A"])
    a2 <- 2 + abs(sum(ganancia[maquina == "A"] -1))
  }
  if (sum(maquina == "B") > 0) {
    b1 <- 2 + sum(ganancia[maquina == "B"])
    b2 <- 2 + abs(sum(ganancia[maquina == "B"] -1))
  }
  if (sum(maquina == "C") > 0) {
    c1 <- 2 + sum(ganancia[maquina == "C"])
    c2 <- 2 + abs(sum(ganancia[maquina == "C"] -1))
  }
  
  
  # Tomo una muestra de cada theta
  muestras <- c(rbeta(1, a1, a2),rbeta(1, b1, b2), rbeta(1, c1, c2))
  # Se podria agregar un parámetro para modificar el tamaño de las muestras y asi ponderar mas a los que tienen
  # parametros mayores.
  
  names(muestras) <- c("A","B","C")
  # Devuelvo la más grande
  
  return(names(muestras[which.max(muestras)]))
  
}


```
:::


Simulando los 366 días de juego:

```{r sim thompson}
sim <- simulacion("thompson", n = 1)

salida <- salidas(sim)


```

```{r thompson grafico_ganancias_acumuladas}
salida$grafico_ganancias_acumuladas
```

Se observa que se ganaron `r max(salida$ganancias_acumuladas)` unidades monetarias en el año.

```{r thompson grafico_barplot}
salida$grafico_barplot

maquina_mas_jugada <- salida$tabla_barplot |> group_by(Maquina) |> summarise(n = sum(Cantidad)) |> filter(n == max(n)) |> select(Maquina) |> as.character() 

```

`r ifelse(length(maquina_mas_jugada) == 1, paste("La máquina más jugada fue la", maquina_mas_jugada) ,paste("Las máquinas más jugadas fueron las", paste(maquina_mas_jugada, collapse = " y ")))`


```{r thompson grafico_posteriors}
salida$grafico_posteriors
```

Y así resultan las distribuciones de la probabilidad de éxito en cada máquina a posteriori. 

Ventajas de la estrategia:

  -

Desventajas de la estrategia:

  -


# Conclución

# Cosas a agregar

Nombres a las figuras y titulos a los graficos

Agregar al pdf la funcion simulacion

Box-plots/Histogramas con las ganancias anuales de cada maquina para las 1000 repeticiones para compararlas
